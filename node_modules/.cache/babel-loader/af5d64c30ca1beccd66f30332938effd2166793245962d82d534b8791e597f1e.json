{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import'./converter.scss';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const Converter=_ref=>{let{loadingMessage,errorMessage,copyApiCurrency}=_ref;const[isLoading,setIsLoading]=useState();const[isError,setIsError]=useState(false);const[loadOverall,setOverall]=useState([]);const[CurrencyCountryCode,setCurrencyCountryCode]=useState([]);const[exchangeRatesbyCountry,setExchangeRatesbyCountry]=useState([]);const[convertFromCurrency,setconvertFromCurrency]=useState('');const[convertToCurrency,setconvertToCurrency]=useState('');const[lastUpdate,setLastUpdate]=useState();const[lastUpdateDateFormatting,setLastUpdateDateFormatting]=useState();const[lastUpdateTimeFormatting,setLastUpdateTimeFormatting]=useState();const[convertedValue,setconvertedValue]=useState('');const fetchDataConversion=()=>{setIsLoading(true);fetch('https://open.er-api.com/v6/latest/USD').then(res=>res.json()).then(response=>{setIsLoading(false);setExchangeRatesbyCountry(response.rates);setLastUpdate(response.time_last_update_unix);let CountryCode=Object.keys(response.rates);let entries=Object.entries(response.rates);setCurrencyCountryCode(CountryCode);setOverall(entries);},error=>{setIsLoading(false);setIsError(error);});};//use of the useeffect hook to prevent the function to be called over and over because of re render\nuseEffect(()=>{fetchDataConversion();},[]);const renderCurrencyCompleteList=()=>{const ratingList=[];for(const countries of loadOverall){ratingList.push(/*#__PURE__*/_jsxs(\"li\",{children:[countries[0],\" : \",countries[1]]},countries[0]));}return/*#__PURE__*/_jsx(\"ul\",{className:\"list-5-col\",children:ratingList});};const displayLastUpdate=()=>{let date=new Date(lastUpdate*1000);let dateformat=date.toDateString();let timeformat=date.toTimeString();setLastUpdateDateFormatting(dateformat);setLastUpdateTimeFormatting(timeformat);};useEffect(()=>{displayLastUpdate();},[lastUpdate]);const selectedCountry=event=>{//remove values when new conversion request\nif(convertFromCurrency&&convertToCurrency){setconvertFromCurrency('');setconvertToCurrency('');setconvertedValue('');}const selectedValue=event.currentTarget.textContent;let listType=event.currentTarget.parentElement.getAttribute('data-convert-origin');listType===\"from-currency\"?setconvertFromCurrency(selectedValue):setconvertToCurrency(selectedValue);};const renderCountryList=CurrencyCountryCode.map(country=>/*#__PURE__*/_jsx(\"li\",{onClick:selectedCountry,children:country},\"id-\".concat(country)));/*calculation for any conversion based on USD rate\n      if 1 dollar is 0.92 eur and 0.78 GBP how much is 1 euros in pounds\n      value 1 (rate USD base 1), divided b value 2 (value of chosen currency for 1 dollar), times value 3 (value of chosen currency for 1 dollar);\n      example for 1 euro to GBP (1 / 0.93) * 0.78;\n    */const conversionCalc=()=>{/* notation to get a JSON value from a variable value: [] instead of \".\" \n          ie : myjson.myEl will look for the value of myEl inside the json but lets say let myEl = 'mykey'\n          by doing myjson[myEl] it will look for the value of mykey inside json.\n        */let calc=1/exchangeRatesbyCountry[convertFromCurrency]*exchangeRatesbyCountry[convertToCurrency];setconvertedValue(calc);};return/*#__PURE__*/_jsxs(_Fragment,{children:[isLoading&&/*#__PURE__*/_jsx(\"p\",{className:\"loadingMessage\",children:loadingMessage}),isError&&/*#__PURE__*/_jsx(\"p\",{className:\"errorMessage\",children:errorMessage}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Currency Converter\"}),/*#__PURE__*/_jsx(\"p\",{children:copyApiCurrency}),/*#__PURE__*/_jsxs(\"div\",{className:\"converterWrp\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"conversionValues\",children:[\"FROM: \",/*#__PURE__*/_jsxs(\"span\",{className:\"bold\",children:[convertFromCurrency,\" \"]}),\"TO: \",/*#__PURE__*/_jsx(\"span\",{className:\"bold\",children:convertToCurrency})]}),/*#__PURE__*/_jsx(\"div\",{className:\"buttonConversion\",onClick:conversionCalc,children:\"CONVERT\"}),convertToCurrency&&convertFromCurrency&&convertedValue&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"conversionRes\",children:[\"1 \",convertFromCurrency,\" = \",convertedValue,\" \",convertToCurrency]}),/*#__PURE__*/_jsxs(\"p\",{className:\"conversionDataUpdate\",children:[\"Last Data Update: \",lastUpdateDateFormatting,\" at \",lastUpdateTimeFormatting]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"countryListWrp\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Select Rates from\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"countryList\",\"data-convert-origin\":\"from-currency\",children:renderCountryList})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Select Rates to\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"countryList\",\"data-convert-origin\":\"to-currency\",children:renderCountryList})]})]})]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Rating List\"}),/*#__PURE__*/_jsx(\"div\",{children:renderCurrencyCompleteList()})]});};export default Converter;","map":{"version":3,"names":["React","useEffect","useState","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","Converter","_ref","loadingMessage","errorMessage","copyApiCurrency","isLoading","setIsLoading","isError","setIsError","loadOverall","setOverall","CurrencyCountryCode","setCurrencyCountryCode","exchangeRatesbyCountry","setExchangeRatesbyCountry","convertFromCurrency","setconvertFromCurrency","convertToCurrency","setconvertToCurrency","lastUpdate","setLastUpdate","lastUpdateDateFormatting","setLastUpdateDateFormatting","lastUpdateTimeFormatting","setLastUpdateTimeFormatting","convertedValue","setconvertedValue","fetchDataConversion","fetch","then","res","json","response","rates","time_last_update_unix","CountryCode","Object","keys","entries","error","renderCurrencyCompleteList","ratingList","countries","push","children","className","displayLastUpdate","date","Date","dateformat","toDateString","timeformat","toTimeString","selectedCountry","event","selectedValue","currentTarget","textContent","listType","parentElement","getAttribute","renderCountryList","map","country","onClick","concat","conversionCalc","calc"],"sources":["/Users/elisabeth.vicente/Documents/sites/elisabeth-v.github.io/src/components/converter/converter.tsx"],"sourcesContent":["import React, { useEffect,useState } from \"react\";\nimport './converter.scss';\nimport { LabelsProps , selectedCountryProps } from \"../data/interfaces\";\n\nconst Converter = ({loadingMessage, errorMessage, copyApiCurrency} : LabelsProps) => {\n    const [isLoading, setIsLoading] = useState<boolean>();\n    const [isError, setIsError] = useState<boolean>(false);\n    const [loadOverall, setOverall] = useState<any>([]);\n    const [CurrencyCountryCode, setCurrencyCountryCode] = useState<any>([]);\n    const [exchangeRatesbyCountry, setExchangeRatesbyCountry] = useState<any>([]);\n    const [convertFromCurrency, setconvertFromCurrency] = useState('');\n    const [convertToCurrency, setconvertToCurrency] = useState('');\n    const [lastUpdate,setLastUpdate] = useState<any>();\n    const [lastUpdateDateFormatting,setLastUpdateDateFormatting ] = useState<any>();\n    const [lastUpdateTimeFormatting,setLastUpdateTimeFormatting ] = useState<any>(); \n    const [convertedValue,setconvertedValue ] = useState<any>('');\n\n    const fetchDataConversion = () =>{\n        setIsLoading(true);\n        fetch('https://open.er-api.com/v6/latest/USD')\n        .then(res => res.json())\n        .then(\n            (response) => { \n                setIsLoading(false);\n                setExchangeRatesbyCountry(response.rates);\n                setLastUpdate(response.time_last_update_unix);\n                let CountryCode = Object.keys(response.rates);\n                let entries = Object.entries(response.rates);\n                setCurrencyCountryCode(CountryCode);\n                setOverall(entries);\n            },\n            (error) => {\n                setIsLoading(false);\n                setIsError(error);\n            }\n        );\n    }\n    \n    //use of the useeffect hook to prevent the function to be called over and over because of re render\n    useEffect(() => {\n        fetchDataConversion();\n    },[]);\n\n    const renderCurrencyCompleteList = () => {\n        const ratingList = [];\n        for (const countries of loadOverall) {\n          ratingList.push(<li key={countries[0]}>{countries[0]} : {countries[1]}</li>);\n        }\n        return <ul className=\"list-5-col\">{ratingList}</ul>;\n    };\n\n    const displayLastUpdate = () => {\n        let date = new Date(lastUpdate * 1000);\n        let dateformat = date.toDateString();\n        let timeformat = date.toTimeString();\n        setLastUpdateDateFormatting(dateformat);\n        setLastUpdateTimeFormatting(timeformat);\n    }\n\n    useEffect(() => {\n        displayLastUpdate();\n    },[lastUpdate]);\n\n    const selectedCountry = (event : selectedCountryProps) => {\n        //remove values when new conversion request\n        if(convertFromCurrency && convertToCurrency){\n            setconvertFromCurrency('');\n            setconvertToCurrency('');\n            setconvertedValue('');\n        }\n        const selectedValue = event.currentTarget.textContent;\n        let listType = event.currentTarget.parentElement.getAttribute('data-convert-origin');\n        listType === \"from-currency\" ? setconvertFromCurrency(selectedValue) : setconvertToCurrency(selectedValue);\n    } \n\n    const renderCountryList = CurrencyCountryCode.map((country: string) =>\n        <li key={`id-${country}`} onClick={selectedCountry}>\n            {country}\n        </li>\n    )\n\n    /*calculation for any conversion based on USD rate\n      if 1 dollar is 0.92 eur and 0.78 GBP how much is 1 euros in pounds\n      value 1 (rate USD base 1), divided b value 2 (value of chosen currency for 1 dollar), times value 3 (value of chosen currency for 1 dollar);\n      example for 1 euro to GBP (1 / 0.93) * 0.78;\n    */\n    const conversionCalc = () => {\n        /* notation to get a JSON value from a variable value: [] instead of \".\" \n          ie : myjson.myEl will look for the value of myEl inside the json but lets say let myEl = 'mykey'\n          by doing myjson[myEl] it will look for the value of mykey inside json.\n        */\n        let calc = 1 / exchangeRatesbyCountry[convertFromCurrency] * exchangeRatesbyCountry[convertToCurrency];\n        setconvertedValue(calc);\n    }\n\n    return(\n        <>\n            {isLoading && \n                <p className=\"loadingMessage\">{loadingMessage}</p>\n            }\n            {isError &&\n                <p className=\"errorMessage\">{errorMessage}</p>\n            }\n            <div>   \n                <h2>Currency Converter</h2>\n                <p>{copyApiCurrency}</p>\n\n                <div className=\"converterWrp\">\n                    <p className=\"conversionValues\">\n                        FROM: <span className='bold'>{convertFromCurrency} </span>\n                        TO: <span className='bold'>{convertToCurrency}</span> \n                    </p>\n                    \n                    <div className=\"buttonConversion\" onClick={conversionCalc} >CONVERT</div>\n                    \n                    {convertToCurrency && convertFromCurrency && convertedValue &&\n                        <>\n                            <div className=\"conversionRes\">1 {convertFromCurrency} = {convertedValue} {convertToCurrency}</div>\n                            <p className=\"conversionDataUpdate\">Last Data Update: {lastUpdateDateFormatting} at {lastUpdateTimeFormatting}</p>\n                        </>\n                    }\n                </div>\n\n                <div className=\"countryListWrp\">\n                    <div>\n                        <p>Select Rates from</p>\n                        <ul className=\"countryList\" data-convert-origin=\"from-currency\">\n                            {renderCountryList}\n                        </ul>\n                    </div>\n                    <div>\n                    <p>Select Rates to</p>\n                        <ul className=\"countryList\" data-convert-origin=\"to-currency\">\n                            {renderCountryList}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <h2>Rating List</h2>\n            <div>{renderCurrencyCompleteList()}</div>\n        </>\n    )\n}\n\nexport default Converter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}