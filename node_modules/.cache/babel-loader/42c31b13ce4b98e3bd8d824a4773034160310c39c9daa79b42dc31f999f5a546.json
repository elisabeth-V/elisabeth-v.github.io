{"ast":null,"code":"var _jsxFileName = \"/Users/elisabeth.vicente/Documents/sites/elisabeth-v.github.io/src/components/converter/converter.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './Converter.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Converter = ({\n  loadingMessage,\n  errorMessage\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState();\n  const [isError, setIsError] = useState(false);\n  const [loadRatesConversion, setRatesConversion] = useState([]);\n  const [loadOverall, setOverall] = useState([]);\n  const [CurrencyCountryCode, setCurrencyCountryCode] = useState([]);\n  const [exchangeRatesbyCountry, setExchangeRatesbyCountry] = useState([]);\n  const [convertFromCurrency, setconvertFromCurrency] = useState('');\n  const [convertToCurrency, setconvertToCurrency] = useState('');\n  const [lastUpdate, setLastUpdate] = useState();\n  const [lastUpdateDateFormatting, setLastUpdateDateFormatting] = useState();\n  const [lastUpdateTimeFormatting, setLastUpdateTimeFormatting] = useState();\n  const [convertedValue, setconvertedValue] = useState('');\n  const fetchDataConversion = () => {\n    setIsLoading(true);\n    fetch('https://open.er-api.com/v6/latest/USD').then(res => res.json()).then(response => {\n      setIsLoading(false);\n      setExchangeRatesbyCountry(response.rates);\n      setLastUpdate(response.time_last_update_unix);\n      let results = Object.values(response.rates);\n      let CountryCode = Object.keys(response.rates);\n      let entries = Object.entries(response.rates);\n      setRatesConversion(results);\n      setCurrencyCountryCode(CountryCode);\n      setOverall(entries);\n    }, error => {\n      setIsLoading(false);\n      setIsError(error);\n    });\n  };\n\n  //use of the useeffect hook to prevent the function to be called over and over because of re render\n  useEffect(() => {\n    fetchDataConversion();\n  }, []);\n  const renderCurrencyCompleteList = () => {\n    const ratingList = [];\n    for (const countries of loadOverall) {\n      ratingList.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [countries[0], \" , \", countries[1]]\n      }, countries[0], true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ratingList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  };\n  const displayLastUpdate = () => {\n    let date = new Date(lastUpdate * 1000);\n    let dateformat = date.toDateString();\n    let timeformat = date.toTimeString();\n    setLastUpdateDateFormatting(dateformat);\n    setLastUpdateTimeFormatting(timeformat);\n  };\n  useEffect(() => {\n    displayLastUpdate();\n  }, [lastUpdate]);\n  const selectedCountry = event => {\n    //remove values when new conversion request\n    if (convertFromCurrency && convertToCurrency) {\n      setconvertFromCurrency('');\n      setconvertToCurrency('');\n      setconvertedValue('');\n    }\n    const selectedValue = event.currentTarget.textContent;\n    let listType = event.currentTarget.parentElement.getAttribute('data-convert-origin');\n    listType === \"from-currency\" ? setconvertFromCurrency(selectedValue) : setconvertToCurrency(selectedValue);\n  };\n  const renderCountryList = CurrencyCountryCode.map(country => /*#__PURE__*/_jsxDEV(\"li\", {\n    onClick: selectedCountry,\n    children: country\n  }, `id-${country}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this));\n\n  /*calculation for any conversion based on USD rate\n    if 1 dollar is 0.92 eur and 0.78 GBP how much is 1 euros in pounds\n    value 1 (rate USD base 1), divided b value 2 (value of chosen currency for 1 dollar), times value 3 (value of chosen currency for 1 dollar);\n    example for 1 euro to GBP (1 / 0.93) * 0.78;\n  */\n  const conversionCalc = () => {\n    /* notation to get a JSON value from a variable value: [] instead of \".\" \n      ie : myjson.myEl will look for the value of myEl inside the json but lets say let myEl = 'mykey'\n      by doing myjson[myEl] it will look for the value of mykey inside json.\n    */\n    let calc = 1 / exchangeRatesbyCountry[convertFromCurrency] * exchangeRatesbyCountry[convertToCurrency];\n    setconvertedValue(calc);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loadingMessage\",\n      children: loadingMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMessage\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Convert \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this), \"FROM: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold\",\n          children: [convertFromCurrency, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 41\n        }, this), \"TO : \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold\",\n          children: convertToCurrency\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonConversion\",\n        onClick: conversionCalc,\n        children: \"CONVERT IT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), convertToCurrency && convertFromCurrency && convertedValue && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"1 \", convertFromCurrency, \" = \", convertedValue, \" \", convertToCurrency]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"last Data Update:\", lastUpdateDateFormatting, \" at \", lastUpdateTimeFormatting]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countryListWrp\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Rates from\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"countryList\",\n            \"data-convert-origin\": \"from-currency\",\n            children: renderCountryList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Rates to\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"countryList\",\n            \"data-convert-origin\": \"to-currency\",\n            children: renderCountryList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Rates Only \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), loadRatesConversion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderCurrencyCompleteList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Converter, \"VOIiAZdD3ORTFCwBPlW5TOjxx+4=\");\n_c = Converter;\nexport default Converter;\nvar _c;\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Converter","loadingMessage","errorMessage","_s","isLoading","setIsLoading","isError","setIsError","loadRatesConversion","setRatesConversion","loadOverall","setOverall","CurrencyCountryCode","setCurrencyCountryCode","exchangeRatesbyCountry","setExchangeRatesbyCountry","convertFromCurrency","setconvertFromCurrency","convertToCurrency","setconvertToCurrency","lastUpdate","setLastUpdate","lastUpdateDateFormatting","setLastUpdateDateFormatting","lastUpdateTimeFormatting","setLastUpdateTimeFormatting","convertedValue","setconvertedValue","fetchDataConversion","fetch","then","res","json","response","rates","time_last_update_unix","results","Object","values","CountryCode","keys","entries","error","renderCurrencyCompleteList","ratingList","countries","push","children","fileName","_jsxFileName","lineNumber","columnNumber","displayLastUpdate","date","Date","dateformat","toDateString","timeformat","toTimeString","selectedCountry","event","selectedValue","currentTarget","textContent","listType","parentElement","getAttribute","renderCountryList","map","country","onClick","conversionCalc","calc","className","_c","$RefreshReg$"],"sources":["/Users/elisabeth.vicente/Documents/sites/elisabeth-v.github.io/src/components/converter/converter.tsx"],"sourcesContent":["import React, { useEffect,useState } from \"react\";\nimport './Converter.scss';\nimport { StyledLink } from \"../../app-styled\";\nimport { LabelsProps } from \"../data/interfaces\";\n\nconst Converter = ({loadingMessage, errorMessage} : LabelsProps) => {\n    const [isLoading, setIsLoading] = useState<boolean>();\n    const [isError, setIsError] = useState<boolean>(false);\n    const [loadRatesConversion, setRatesConversion] = useState<any>([]);\n    const [loadOverall, setOverall] = useState<any>([]);\n    const [CurrencyCountryCode, setCurrencyCountryCode] = useState<any>([]);\n    const [exchangeRatesbyCountry, setExchangeRatesbyCountry] = useState([]);\n    const [convertFromCurrency, setconvertFromCurrency] = useState('');\n    const [convertToCurrency, setconvertToCurrency] = useState('');\n    const [lastUpdate,setLastUpdate] = useState();\n    const [lastUpdateDateFormatting,setLastUpdateDateFormatting ] = useState<any>();\n    const [lastUpdateTimeFormatting,setLastUpdateTimeFormatting ] = useState<any>(); \n    const [convertedValue,setconvertedValue ] = useState('');\n    interface selectedCountryProps {\n        target?:any,\n        id?:string,\n        currentTarget?:any,\n    }\n    const fetchDataConversion = () =>{\n        setIsLoading(true);\n        fetch('https://open.er-api.com/v6/latest/USD')\n        .then(res => res.json())\n        .then(\n            (response) => { \n                setIsLoading(false);\n                setExchangeRatesbyCountry(response.rates);\n                setLastUpdate(response.time_last_update_unix);\n                let results = Object.values(response.rates);\n                let CountryCode = Object.keys(response.rates);\n                let entries = Object.entries(response.rates);\n                setRatesConversion(results);\n                setCurrencyCountryCode(CountryCode);\n                setOverall(entries);\n            },\n            (error) => {\n                setIsLoading(false);\n                setIsError(error);\n            }\n        );\n    }\n    \n    //use of the useeffect hook to prevent the function to be called over and over because of re render\n    useEffect(() => {\n        fetchDataConversion();\n    },[]);\n\n    const renderCurrencyCompleteList = () => {\n        const ratingList = [];\n        for (const countries of loadOverall) {\n          ratingList.push(<li key={countries[0]}>{countries[0]} , {countries[1]}</li>);\n        }\n        return <ul>{ratingList}</ul>;\n    };\n\n    const displayLastUpdate = () => {\n        let date = new Date(lastUpdate * 1000);\n        let dateformat = date.toDateString();\n        let timeformat = date.toTimeString();\n        setLastUpdateDateFormatting(dateformat);\n        setLastUpdateTimeFormatting(timeformat);\n    }\n\n    useEffect(() => {\n        displayLastUpdate();\n    },[lastUpdate]);\n\n    const selectedCountry = (event : selectedCountryProps) => {\n        //remove values when new conversion request\n        if(convertFromCurrency && convertToCurrency){\n            setconvertFromCurrency('');\n            setconvertToCurrency('');\n            setconvertedValue('');\n        }\n        const selectedValue = event.currentTarget.textContent;\n        let listType = event.currentTarget.parentElement.getAttribute('data-convert-origin');\n        listType === \"from-currency\" ? setconvertFromCurrency(selectedValue) : setconvertToCurrency(selectedValue);\n    } \n\n    const renderCountryList = CurrencyCountryCode.map((country) =>\n        <li key={`id-${country}`} onClick={selectedCountry}>\n            {country}\n        </li>\n    )\n\n    /*calculation for any conversion based on USD rate\n      if 1 dollar is 0.92 eur and 0.78 GBP how much is 1 euros in pounds\n      value 1 (rate USD base 1), divided b value 2 (value of chosen currency for 1 dollar), times value 3 (value of chosen currency for 1 dollar);\n      example for 1 euro to GBP (1 / 0.93) * 0.78;\n    */\n    const conversionCalc = () => {\n        /* notation to get a JSON value from a variable value: [] instead of \".\" \n          ie : myjson.myEl will look for the value of myEl inside the json but lets say let myEl = 'mykey'\n          by doing myjson[myEl] it will look for the value of mykey inside json.\n        */\n        let calc = 1 / exchangeRatesbyCountry[convertFromCurrency] * exchangeRatesbyCountry[convertToCurrency];\n\n        setconvertedValue(calc);\n    }\n\n    return(\n        <>\n            {isLoading && \n                <p className=\"loadingMessage\">{loadingMessage}</p>\n            }\n            {isError &&\n                <p className=\"errorMessage\">{errorMessage}</p>\n            }\n            <div>\n                <p>\n                    Convert <br />FROM: <span className='bold'>{convertFromCurrency} </span>\n                    TO : <span className='bold'>{convertToCurrency}</span> \n                </p>\n                \n                <div className=\"buttonConversion\" onClick={conversionCalc} >CONVERT IT</div>\n                { convertToCurrency && convertFromCurrency && convertedValue &&\n                    <div>1 {convertFromCurrency} = {convertedValue} {convertToCurrency}</div>\n                }\n                \n                \n                <p>last Data Update:{lastUpdateDateFormatting} at {lastUpdateTimeFormatting}</p>\n\n                <div className=\"countryListWrp\">\n                    <div>\n                        <p>Select Rates from</p>\n                        <ul className=\"countryList\" data-convert-origin=\"from-currency\">\n                            {renderCountryList}\n                        </ul>\n                    </div>\n                    <div>\n                    <p>Select Rates to</p>\n                    <ul className=\"countryList\" data-convert-origin=\"to-currency\">\n                        {renderCountryList}\n                    </ul>\n                    </div>\n                </div>\n            </div>\n\n            <div>\n                <p>Rates Only </p>\n                {loadRatesConversion}\n            </div>\n\n            <div>{renderCurrencyCompleteList()}</div>\n        </>\n    )\n}\n\nexport default Converter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}